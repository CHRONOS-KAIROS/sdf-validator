# Autogenerated file.  Do not edit.
# See sdf-types/

from typing import NewType, Literal, Union, TypedDict, Any

_GenericSdfPropertiesTotal = TypedDict("_GenericSdfPropertiesTotal", {}, total=True)
_GenericSdfPropertiesOptional = TypedDict(
    "_GenericSdfPropertiesOptional",
    {"privateData": "dict[str, Any]", "comment": "Union[str, list[str]]"},
    total=False,
)


class GenericSdfProperties(_GenericSdfPropertiesTotal, _GenericSdfPropertiesOptional):
    pass


_HasWdNodeTotal = TypedDict(
    "_HasWdNodeTotal",
    {
        "wd_node": "Union[WdNode, list[WdNode]]",
        "wd_label": "Union[str, list[str]]",
        "wd_description": "Union[str, list[str]]",
    },
    total=True,
)
_HasWdNodeOptional = TypedDict("_HasWdNodeOptional", {}, total=False)


class HasWdNode(_HasWdNodeTotal, _HasWdNodeOptional):
    pass


_HasWdNodeOptionalTotal = TypedDict("_HasWdNodeOptionalTotal", {}, total=True)
_HasWdNodeOptionalOptional = TypedDict(
    "_HasWdNodeOptionalOptional",
    {
        "wd_node": "Union[WdNode, list[WdNode]]",
        "wd_label": "Union[str, list[str]]",
        "wd_description": "Union[str, list[str]]",
    },
    total=False,
)


class HasWdNodeOptional(_HasWdNodeOptionalTotal, _HasWdNodeOptionalOptional):
    pass


DocumentId = NewType("DocumentId", str)
""""""

EventPrimitiveId = NewType("EventPrimitiveId", str)
""""""

InstanceId = NewType("InstanceId", str)
""""""

EntityId = NewType("EntityId", str)
""""""

RelationId = NewType("RelationId", str)
""""""

EventId = NewType("EventId", str)
""""""

ParticipantId = NewType("ParticipantId", str)
""""""

ValueId = NewType("ValueId", str)
""""""

WdNode = NewType("WdNode", str)
""""""

ProvenanceDatumId = NewType("ProvenanceDatumId", str)
""""""

AnyId = Union[
    "DocumentId",
    "EventPrimitiveId",
    "InstanceId",
    "EntityId",
    "RelationId",
    "EventId",
    "ParticipantId",
    "ValueId",
    "ProvenanceDatumId",
]

StringOrContextMapping = Union["str", "JsonLdContextMapping"]

JsonLdContextArray = Union[StringOrContextMapping, list[StringOrContextMapping]]
JsonLdContextMapping = dict[str, Any]
JsonLdContext = Union["JsonLdContextArray", "JsonLdContextMapping"]

_DocumentTotal = TypedDict(
    "_DocumentTotal",
    {
        "@id": "DocumentId",
        "@context": "JsonLdContext",
        "sdfVersion": "str",
        "version": "str",
    },
    total=True,
)
_DocumentOptional = TypedDict(
    "_DocumentOptional",
    {
        "events": "Union[Event, list[Event]]",
        "ceID": "str",
        "entities": "Union[Entity, list[Entity]]",
        "instances": "Union[Instance, list[Instance]]",
        "provenanceData": "Union[ProvenanceDatum, list[ProvenanceDatum]]",
        "relations": "Union[Relation, list[Relation]]",
        "ta2": "bool",
        "task2": "bool",
    },
    total=False,
)


class Document(GenericSdfProperties, _DocumentTotal, _DocumentOptional):
    pass


_InstanceTotal = TypedDict(
    "_InstanceTotal",
    {
        "@id": "InstanceId",
        "name": "str",
        "entities": "Union[Entity, list[Entity]]",
        "events": "Union[Event, list[Event]]",
    },
    total=True,
)
_InstanceOptional = TypedDict(
    "_InstanceOptional",
    {
        "confidence": "float",
        "description": "str",
        "relations": "Union[Relation, list[Relation]]",
        "schemaInstantiations": "Union[str, list[str]]",
        "ta1ref": 'Union["EventId", "InstanceId", "RelationId"]',
    },
    total=False,
)


class Instance(_InstanceTotal, _InstanceOptional):
    pass


EventEntityRelationId = Union["EventId", "EntityId", "RelationId"]

EventEntityId = Union["EventId", "EntityId"]

_ValueTotal = TypedDict(
    "_ValueTotal",
    {
        "@id": "ValueId",
        "provenance": "Union[str, list[str]]",
        "ta2entity": "EventEntityId",
    },
    total=True,
)
_ValueOptional = TypedDict(
    "_ValueOptional",
    {"confidence": "Union[float, list[float]]", "modality": "Modality"},
    total=False,
)


class Value(_ValueTotal, _ValueOptional):
    pass


_EntityTotal = TypedDict("_EntityTotal", {"@id": "EntityId", "name": "str"}, total=True)
_EntityOptional = TypedDict(
    "_EntityOptional",
    {
        "aka": "Union[str, list[str]]",
        "centrality": "float",
        "reference": "Union[str, list[str]]",
        "ta2wd_node": "Union[WdNode, list[WdNode]]",
        "ta2wd_label": "Union[str, list[str]]",
        "ta2wd_description": "Union[str, list[str]]",
        "origName": "str",
        "confidence": "Union[float, list[float]]",
    },
    total=False,
)


class Entity(GenericSdfProperties, HasWdNodeOptional, _EntityTotal, _EntityOptional):
    pass


ModalityValue = Literal["generic", "hedged", "irrealis", "negated"]

Modality = Union[ModalityValue, list[ModalityValue]]
Aspect = Literal["stat", "punct", "perf", "imperf", "iter", "incept", "unspec"]

_ProvenanceDatumGenericTotal = TypedDict(
    "_ProvenanceDatumGenericTotal",
    {
        "provenanceID": "ProvenanceDatumId",
        "childID": "str",
        "mediaType": "str",
        "parentIDs": "Union[str, list[str]]",
    },
    total=True,
)
_ProvenanceDatumGenericOptional = TypedDict(
    "_ProvenanceDatumGenericOptional", {"sourceURL": "str"}, total=False
)


class ProvenanceDatumGeneric(
    GenericSdfProperties, _ProvenanceDatumGenericTotal, _ProvenanceDatumGenericOptional
):
    pass


ProvenanceDatum = Union[
    "ProvenanceDatumText",
    "ProvenanceDatumVideo",
    "ProvenanceDatumAudio",
    "ProvenanceDatumImage",
]

_ProvenanceDatumTextTotal = TypedDict(
    "_ProvenanceDatumTextTotal", {"length": "float", "offset": "float"}, total=True
)
_ProvenanceDatumTextOptional = TypedDict(
    "_ProvenanceDatumTextOptional", {}, total=False
)


class ProvenanceDatumText(
    ProvenanceDatumGeneric, _ProvenanceDatumTextTotal, _ProvenanceDatumTextOptional
):
    pass


_ProvenanceDatumVideoTotal = TypedDict("_ProvenanceDatumVideoTotal", {}, total=True)
_ProvenanceDatumVideoOptional = TypedDict(
    "_ProvenanceDatumVideoOptional",
    {
        "boundingBox": "Union[float, list[float]]",
        "endTime": "float",
        "keyframes": "Union[float, list[float]]",
        "startTime": "float",
    },
    total=False,
)


class ProvenanceDatumVideo(
    ProvenanceDatumGeneric, _ProvenanceDatumVideoTotal, _ProvenanceDatumVideoOptional
):
    pass


_ProvenanceDatumAudioTotal = TypedDict(
    "_ProvenanceDatumAudioTotal", {"endTime": "float", "startTime": "float"}, total=True
)
_ProvenanceDatumAudioOptional = TypedDict(
    "_ProvenanceDatumAudioOptional", {}, total=False
)


class ProvenanceDatumAudio(
    ProvenanceDatumGeneric, _ProvenanceDatumAudioTotal, _ProvenanceDatumAudioOptional
):
    pass


_ProvenanceDatumImageTotal = TypedDict(
    "_ProvenanceDatumImageTotal",
    {"boundingBox": "Union[float, list[float]]"},
    total=True,
)
_ProvenanceDatumImageOptional = TypedDict(
    "_ProvenanceDatumImageOptional", {}, total=False
)


class ProvenanceDatumImage(
    ProvenanceDatumGeneric, _ProvenanceDatumImageTotal, _ProvenanceDatumImageOptional
):
    pass


_RelationTotal = TypedDict(
    "_RelationTotal",
    {
        "@id": "RelationId",
        "relationObject": "Union[EventEntityId, list[EventEntityId]]",
        "relationSubject": "EventEntityId",
    },
    total=True,
)
_RelationOptional = TypedDict(
    "_RelationOptional",
    {
        "ta1ref": "EventEntityRelationId",
        "centrality": "float",
        "confidence": "float",
        "modality": "Modality",
        "name": "str",
        "reference": "Union[str, list[str]]",
        "relationObject_prov": "str",
        "relationProvenance": "Union[str, list[str]]",
        "relationSubject_prov": "str",
        "origName": "str",
    },
    total=False,
)


class Relation(GenericSdfProperties, HasWdNode, _RelationTotal, _RelationOptional):
    pass


ChildrenGate = Literal["and", "or", "xor"]

_EventTotal = TypedDict("_EventTotal", {"@id": "EventId", "name": "str"}, total=True)
_EventOptional = TypedDict(
    "_EventOptional",
    {
        "achieves": "str",
        "requires": "str",
        "aka": "Union[str, list[str]]",
        "children": "Union[Child, list[Child]]",
        "confidence": "Union[float, list[float]]",
        "description": "str",
        "goal": "str",
        "instanceOf": "EventId",
        "maxDuration": "str",
        "minDuration": "str",
        "modality": "Modality",
        "children_gate": "ChildrenGate",
        "participants": "Union[Participant, list[Participant]]",
        "provenance": "Union[ProvenanceDatumId, list[ProvenanceDatumId]]",
        "reference": "Union[str, list[str]]",
        "relations": "Union[Relation, list[Relation]]",
        "repeatable": "bool",
        "ta1explanation": "Union[str, list[str]]",
        "ta1ref": 'Union["EventId", "InstanceId", "RelationId"]',
        "temporal": "Union[TemporalObject, list[TemporalObject]]",
        "ta2wd_node": "Union[WdNode, list[WdNode]]",
        "ta2wd_label": "Union[str, list[str]]",
        "ta2wd_description": "Union[str, list[str]]",
        "predictionProvenance": "Union[EventEntityRelationId, list[EventEntityRelationId]]",
        "isTopLevel": "bool",
        "origDescription": "str",
        "origName": "str",
        "parent": "EventId",
        "subgroup_events": "Union[EventId, list[EventId]]",
        "outlinks": "Union[EventId, list[EventId]]",
    },
    total=False,
)


class Event(GenericSdfProperties, HasWdNodeOptional, _EventTotal, _EventOptional):
    pass


_ChildTotal = TypedDict("_ChildTotal", {"child": "EventId"}, total=True)
_ChildOptional = TypedDict(
    "_ChildOptional",
    {"importance": "float", "optional": "bool", "repeatable": "bool"},
    total=False,
)


class Child(GenericSdfProperties, _ChildTotal, _ChildOptional):
    pass


_ParticipantTotal = TypedDict(
    "_ParticipantTotal",
    {"@id": "ParticipantId", "entity": "EventEntityId", "roleName": "str"},
    total=True,
)
_ParticipantOptional = TypedDict(
    "_ParticipantOptional",
    {"reference": "Union[str, list[str]]", "values": "Union[Value, list[Value]]"},
    total=False,
)


class Participant(
    GenericSdfProperties, HasWdNodeOptional, _ParticipantTotal, _ParticipantOptional
):
    pass


_TemporalObjectTotal = TypedDict("_TemporalObjectTotal", {}, total=True)
_TemporalObjectOptional = TypedDict(
    "_TemporalObjectOptional",
    {
        "absoluteTime": "str",
        "confidence": "float",
        "duration": "str",
        "earliestEndTime": "str",
        "earliestStartTime": "str",
        "latestStartTime": "str",
        "latestEndTime": "str",
        "provenance": "Union[ProvenanceDatumId, list[ProvenanceDatumId]]",
    },
    total=False,
)


class TemporalObject(
    GenericSdfProperties, _TemporalObjectTotal, _TemporalObjectOptional
):
    pass


_EventPrimitiveTotal = TypedDict(
    "_EventPrimitiveTotal",
    {
        "wd_node": "WdNode",
        "wd_label": "str",
        "wd_description": "str",
        "args": "Union[EventArgument, list[EventArgument]]",
        "isSubschema": "bool",
    },
    total=True,
)
_EventPrimitiveOptional = TypedDict("_EventPrimitiveOptional", {}, total=False)


class EventPrimitive(_EventPrimitiveTotal, _EventPrimitiveOptional):
    pass


_EventArgumentTotal = TypedDict(
    "_EventArgumentTotal", {"name": "str", "fullName": "str"}, total=True
)
_EventArgumentOptional = TypedDict("_EventArgumentOptional", {}, total=False)


class EventArgument(_EventArgumentTotal, _EventArgumentOptional):
    pass
